{
  "html": "<p>Since Tweed comfortably allows for an architecture based on\n<a href=\"#/docs/patterns/dependency-injection\" title=\"Dependency Injection\">Dependency Injection</a>, you&#39;ll might want to automate the process a\nbit. This is where Tweed Inject comes in. First, install the dependency:</p>\n<pre><code class=\"lang-shell\"><span class=\"shell-prompt\"></span><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save tweed-inject</code></pre><p>The library gives us a class called <code>Container</code>, which is a mutable object that holds your\nDI configuration.</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\"> Container</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'tweed-inject'</span>\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p>Without any configuration, the container can be used to create instances of classes:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> MyService</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>MyService<span class=\"token punctuation\">)</span></code></pre><p>Now, if the <code>MyService</code> class has dependencies, we can let the container create them as\nwell, automatically.</p>\n<p>Unfortunately, we cannot get information about the types of the constructor parameters\nfrom vanilla JavaScript; not even vanilla TypeScript. We need to put the information there\nourselves. We can do that using the <code><span class=\"token annotation\">@inject</span></code> decorator:</p>\n<example-slot></example-slot><h3 id=\"depending-on-abstraction\">Depending on Abstraction</h3>\n<p>Injecting a class is easy enough, but we&#39;ll want to build our apps in a way where classes\ndepend on (inject) abstract interfaces instead of concrete classes. This gives us ways to\nindependently build and deploy different parts of the application like plugins. Again,\nthis is a core principle of <a href=\"#/docs/philosophy/object-oriented-design\" title=\"Object Oriented Design\">OOD</a>.</p>\n<p>With vanilla JavaScript, this is implicit since JS does not have interfaces. If a class\nhas a <code><span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>dependency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code> then the implementation of the <code>dependency</code> is\nundefined until the instantiation of the class.</p>\n<p>In TypeScript on the other hand, we have interfaces:</p>\n<pre><code class=\"lang-typescript\"><span class=\"token keyword\">interface</span><span class=\"token class-name\"> ApiClient</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> MyService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>apiClient<span class=\"token punctuation\">:</span><span class=\"token class-name\"> ApiClient</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><p>For the container to inject an actual implementation of an interface, we need to\n<code><span class=\"token annotation\">@inject</span></code> a token to represent the abstract interface, and then bind an implementation to\nthat token:</p>\n<example-slot></example-slot><p>In this example, the <code>ActualApiClient</code> class can have dependencies on its own; the\ncreation process is recursive until all injections are satisfied.</p>\n<blockquote>\n<p><strong>Note:</strong> There are other ways to bind an implementation to an abstraction. <code>toInstance</code>\nuses an existing instance of an implementation, and <code>toFactory</code> takes a factory function\nwhich <em>returns</em> the object to be injected. There is also <code>toSingletonClass</code> and\n<code>toSingletonFactory</code>, which is the same as <code>toClass</code> and <code>toFactory</code> except it will\ncache the resulting object and inject it into every other class that needs it.</p>\n</blockquote>\n",
  "examples": [
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'tweed-inject'</span>\n\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> ApiClient</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>ApiClient<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> MyService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>apiClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>apiClient <span class=\"token operator\">=</span> apiClient\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>MyService<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span>apiClient <span class=\"token keyword\">instanceof</span><span class=\"token class-name\"> ApiClient</span><span class=\"token punctuation\">)</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'tweed-inject'</span>\n\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> ApiClient</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>ApiClient<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> MyService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> apiClient<span class=\"token punctuation\">:</span><span class=\"token class-name\"> ApiClient</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>MyService<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span>apiClient <span class=\"token keyword\">instanceof</span><span class=\"token class-name\"> ApiClient</span><span class=\"token punctuation\">)</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\"> Container</span><span class=\"token punctuation\">,</span> inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'tweed-inject'</span>\n\n<span class=\"token keyword\">const</span> ApiClient <span class=\"token operator\">=</span> <span class=\"token string\">'interface ApiClient'</span>\n\n@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>ApiClient<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> MyService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>apiClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>apiClient <span class=\"token operator\">=</span> apiClient\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> ActualApiClient</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncontainer<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ApiClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toClass</span><span class=\"token punctuation\">(</span>ActualApiClient<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>MyService<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span>apiClient <span class=\"token keyword\">instanceof</span><span class=\"token class-name\"> ActualApiClient</span><span class=\"token punctuation\">)</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\"> Container</span><span class=\"token punctuation\">,</span> inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'tweed-inject'</span>\n\n<span class=\"token keyword\">interface</span><span class=\"token class-name\"> ApiClient</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ApiClient <span class=\"token operator\">=</span> <span class=\"token string\">'interface ApiClient'</span>\n\n@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>ApiClient<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> MyService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> apiClient<span class=\"token punctuation\">:</span><span class=\"token class-name\"> ApiClient</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> ActualApiClient</span> <span class=\"token keyword\">implements</span><span class=\"token class-name\"> ApiClient</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncontainer<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ApiClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toClass</span><span class=\"token punctuation\">(</span>ActualApiClient<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>MyService<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span>apiClient <span class=\"token keyword\">instanceof</span><span class=\"token class-name\"> ActualApiClient</span><span class=\"token punctuation\">)</span></code></pre>",
      "fiddle": false
    }
  ]
}